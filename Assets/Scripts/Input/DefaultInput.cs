//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/Default Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace UnitWarfare.Input
{
    public partial class @DefaultInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DefaultInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Default Input"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""2f8e3215-8055-40fa-b65d-204d7b206176"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""2f8fb282-c142-4815-8291-5999b9502027"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""4047ca8c-939a-4f40-8ce4-825b9b4576b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PintchTouchOne"",
                    ""type"": ""Button"",
                    ""id"": ""fc5556de-9dea-406f-a793-dd685e47e1e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PintchTouchTwo"",
                    ""type"": ""Button"",
                    ""id"": ""3df85f45-4b28-42ee-b296-91b21ae28c92"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PintchPositionOne"",
                    ""type"": ""Value"",
                    ""id"": ""bd8649d9-ca71-484a-9ee9-80b4c34482bb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PintchPositionTwo"",
                    ""type"": ""Value"",
                    ""id"": ""ea0ae3ff-82f5-44fb-8977-3626567c0e8e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveTouch"",
                    ""type"": ""Button"",
                    ""id"": ""55a38487-5a26-4400-a099-9b223c85b0bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9337e4a0-c086-49dd-a0bf-85ab92ea00d7"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95e3a30a-a3d2-497f-b825-990f19ffd44b"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""TouchScheme"",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c691901-4ed9-45ac-9971-b595c4ba2811"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""TouchScheme"",
                    ""action"": ""PintchTouchTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23c4a999-1b8c-4cc8-bfb8-106df121a1f4"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScheme"",
                    ""action"": ""PintchPositionOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efaee00b-3c26-4bb3-825d-3601b645c169"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScheme"",
                    ""action"": ""PintchPositionTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e1948bc-7a6e-4ada-9502-69455f876210"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""TouchScheme"",
                    ""action"": ""PintchTouchOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee17a6d2-926b-45bf-80ba-c1de6749de34"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""TouchScheme"",
                    ""action"": ""MoveTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""8cb10bed-7eb8-4e47-bb20-bd15c9eac04b"",
            ""actions"": [
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""13c27674-06e4-46c1-b70a-dda30918336f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""ad5115b0-b794-4c3a-8413-f586f4ae2876"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b437c778-99b1-41b2-804d-abd5faac746c"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchScheme"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76455ed0-0e9e-4e90-bed3-d2ac6651d63d"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""TouchScheme"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""TouchScheme"",
            ""bindingGroup"": ""TouchScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Touch
            m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
            m_Touch_Position = m_Touch.FindAction("Position", throwIfNotFound: true);
            m_Touch_Touch = m_Touch.FindAction("Touch", throwIfNotFound: true);
            m_Touch_PintchTouchOne = m_Touch.FindAction("PintchTouchOne", throwIfNotFound: true);
            m_Touch_PintchTouchTwo = m_Touch.FindAction("PintchTouchTwo", throwIfNotFound: true);
            m_Touch_PintchPositionOne = m_Touch.FindAction("PintchPositionOne", throwIfNotFound: true);
            m_Touch_PintchPositionTwo = m_Touch.FindAction("PintchPositionTwo", throwIfNotFound: true);
            m_Touch_MoveTouch = m_Touch.FindAction("MoveTouch", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_Point = m_UI.FindAction("Point", throwIfNotFound: true);
            m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Touch
        private readonly InputActionMap m_Touch;
        private ITouchActions m_TouchActionsCallbackInterface;
        private readonly InputAction m_Touch_Position;
        private readonly InputAction m_Touch_Touch;
        private readonly InputAction m_Touch_PintchTouchOne;
        private readonly InputAction m_Touch_PintchTouchTwo;
        private readonly InputAction m_Touch_PintchPositionOne;
        private readonly InputAction m_Touch_PintchPositionTwo;
        private readonly InputAction m_Touch_MoveTouch;
        public struct TouchActions
        {
            private @DefaultInput m_Wrapper;
            public TouchActions(@DefaultInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_Touch_Position;
            public InputAction @Touch => m_Wrapper.m_Touch_Touch;
            public InputAction @PintchTouchOne => m_Wrapper.m_Touch_PintchTouchOne;
            public InputAction @PintchTouchTwo => m_Wrapper.m_Touch_PintchTouchTwo;
            public InputAction @PintchPositionOne => m_Wrapper.m_Touch_PintchPositionOne;
            public InputAction @PintchPositionTwo => m_Wrapper.m_Touch_PintchPositionTwo;
            public InputAction @MoveTouch => m_Wrapper.m_Touch_MoveTouch;
            public InputActionMap Get() { return m_Wrapper.m_Touch; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
            public void SetCallbacks(ITouchActions instance)
            {
                if (m_Wrapper.m_TouchActionsCallbackInterface != null)
                {
                    @Position.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPosition;
                    @Position.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPosition;
                    @Position.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPosition;
                    @Touch.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouch;
                    @Touch.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouch;
                    @Touch.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouch;
                    @PintchTouchOne.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPintchTouchOne;
                    @PintchTouchOne.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPintchTouchOne;
                    @PintchTouchOne.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPintchTouchOne;
                    @PintchTouchTwo.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPintchTouchTwo;
                    @PintchTouchTwo.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPintchTouchTwo;
                    @PintchTouchTwo.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPintchTouchTwo;
                    @PintchPositionOne.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPintchPositionOne;
                    @PintchPositionOne.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPintchPositionOne;
                    @PintchPositionOne.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPintchPositionOne;
                    @PintchPositionTwo.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPintchPositionTwo;
                    @PintchPositionTwo.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPintchPositionTwo;
                    @PintchPositionTwo.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPintchPositionTwo;
                    @MoveTouch.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnMoveTouch;
                    @MoveTouch.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnMoveTouch;
                    @MoveTouch.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnMoveTouch;
                }
                m_Wrapper.m_TouchActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Position.started += instance.OnPosition;
                    @Position.performed += instance.OnPosition;
                    @Position.canceled += instance.OnPosition;
                    @Touch.started += instance.OnTouch;
                    @Touch.performed += instance.OnTouch;
                    @Touch.canceled += instance.OnTouch;
                    @PintchTouchOne.started += instance.OnPintchTouchOne;
                    @PintchTouchOne.performed += instance.OnPintchTouchOne;
                    @PintchTouchOne.canceled += instance.OnPintchTouchOne;
                    @PintchTouchTwo.started += instance.OnPintchTouchTwo;
                    @PintchTouchTwo.performed += instance.OnPintchTouchTwo;
                    @PintchTouchTwo.canceled += instance.OnPintchTouchTwo;
                    @PintchPositionOne.started += instance.OnPintchPositionOne;
                    @PintchPositionOne.performed += instance.OnPintchPositionOne;
                    @PintchPositionOne.canceled += instance.OnPintchPositionOne;
                    @PintchPositionTwo.started += instance.OnPintchPositionTwo;
                    @PintchPositionTwo.performed += instance.OnPintchPositionTwo;
                    @PintchPositionTwo.canceled += instance.OnPintchPositionTwo;
                    @MoveTouch.started += instance.OnMoveTouch;
                    @MoveTouch.performed += instance.OnMoveTouch;
                    @MoveTouch.canceled += instance.OnMoveTouch;
                }
            }
        }
        public TouchActions @Touch => new TouchActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private IUIActions m_UIActionsCallbackInterface;
        private readonly InputAction m_UI_Point;
        private readonly InputAction m_UI_Click;
        public struct UIActions
        {
            private @DefaultInput m_Wrapper;
            public UIActions(@DefaultInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Point => m_Wrapper.m_UI_Point;
            public InputAction @Click => m_Wrapper.m_UI_Click;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void SetCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterface != null)
                {
                    @Point.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                    @Point.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                    @Point.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                    @Click.started -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                    @Click.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                    @Click.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                }
                m_Wrapper.m_UIActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Point.started += instance.OnPoint;
                    @Point.performed += instance.OnPoint;
                    @Point.canceled += instance.OnPoint;
                    @Click.started += instance.OnClick;
                    @Click.performed += instance.OnClick;
                    @Click.canceled += instance.OnClick;
                }
            }
        }
        public UIActions @UI => new UIActions(this);
        private int m_TouchSchemeSchemeIndex = -1;
        public InputControlScheme TouchSchemeScheme
        {
            get
            {
                if (m_TouchSchemeSchemeIndex == -1) m_TouchSchemeSchemeIndex = asset.FindControlSchemeIndex("TouchScheme");
                return asset.controlSchemes[m_TouchSchemeSchemeIndex];
            }
        }
        public interface ITouchActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnTouch(InputAction.CallbackContext context);
            void OnPintchTouchOne(InputAction.CallbackContext context);
            void OnPintchTouchTwo(InputAction.CallbackContext context);
            void OnPintchPositionOne(InputAction.CallbackContext context);
            void OnPintchPositionTwo(InputAction.CallbackContext context);
            void OnMoveTouch(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnPoint(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
        }
    }
}
